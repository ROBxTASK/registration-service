# YAML-Inputfile for the code generator integrated in the registration-service (spring generator from the openapi-generator-maven-plugin)
# for testing and client code generators please use to the autogenerated OPENAPI docs available from a running service instance
openapi: 3.0.3
info:
  title: ROBxTASK Registration Service
  description: This is the interface definition of the registration service for ROBxTASK
    (registration-service). It manages the registration of robotic skills, tasks and processes.
  termsOfService: https://robxtask.salzburgresearch.at/legal-notice/
  contact:
    email: fstroh@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
externalDocs:
  description: Find out more about the ROBxTASK platform
  url: https://robxtask.salzburgresearch.at/
servers:
  - url: https://robxtask.salzburgresearch.at/robxtask/registration-service/
    description: Staging server
  - url: http://localhost:8080/registration-service/
    description: Local development server
paths:
  /version:
    get:
      operationId: getVersion
      tags:
        - version
      description:
        get the service id and version string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /device/{id}:
    get:
      operationId: getDeviceById
      tags:
        - device
      description:
        get a specific device object by its id
      parameters:
        - name: id
          in: path
          description: An ID-String of the Device (e.g. MAC Address)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Device Not Found
          content: {}
    delete:
      operationId: delDeviceById
      tags:
        - device
      description:
        remove device object by its id
      parameters:
        - name: id
          in: path
          description: An ID-String of the Device (e.g. MAC Address)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content: {}
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Device Not Found
          content: {}

      security:
      # - register_device_key: []
      # requires valid user in future!
      - register_task_auth: []

  /device:
    put:
      operationId: updateDevice
      tags:
        - device
      description: update a specific device object by its id
      requestBody:
        description: Device object that shall be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Bad Request. Device put not successful. Content malformed.
          content: {}
        404:
          description: Device not found
          content: {}
      x-codegen-request-body-name: body
      security:
        - register_device_key: []

    post:
      operationId: addDevice
      tags:
        - device
      description: post a new device object
      requestBody:
        description: Device object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        201:
          description: device added
          content: {}
        400:
          description: Bad Request. Device post not successful. Content malformed or ID already exists.
          content: {}
      x-codegen-request-body-name: body
      security:
        - register_device_key: []

  /devices:
    get:
      operationId: getDevices
      tags:
        - devices
      description:
        get list of devices
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - register_device_key: []

  /tasks:
    get:
      operationId: getTasks
      tags:
        - tasks
      description:
        get list of tasks - not yet implemented!
        requires valid user / JWT token
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - register_task_auth: []

  /task:
    post:
      operationId: addTask
      tags:
        - task
      description: post a new task object
      requestBody:
        description: Task object to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        201:
          description: task added
          content: {}
        400:
          description: task post not successful, bad request.
          content: {}
      x-codegen-request-body-name: body
      security:
        - register_device_key: []

components:
  schemas:
    Version:
      title: Version
      type: object
      properties:
        serviceId:
          type: string
        version:
          type: string
      example:
        serviceId: registration-service
        version: V1.0.0
    Skill:
      type: object
      required:
        - SkillName
      properties:
        SkillName:
          type: string
          description:
            Unique name of the skill, as defined below (MoveToLocation, SendMessage, etc.)
          enum:
            - DeliverObject
            - DetectObject
            - FetchObject
            - GetData
            - GrabObject
            - GraphicalUserInteraction
            - Loop
            - MeasureHydration
            - MoveToLocation
            - MoveToPosition
            - OnMessageReceive
            - PutObject
            - Selection
            - SendMessage
            - SetData
            - TeachingObjectRecognition
            - TeachingWorkspacePosition
            - VoiceOutput
            - WaitForCondition
            - WaitForExternalEvent
            - WaitForUserInput
        SkillVersion:
          type: string
          enum: # possible values for the version field, i.e. the list of current and previous supported versions
            - V0.1
            - V01
        SkillDescription:
          type: string
        SkillSlots:
          type: array
          items:
            $ref: '#/components/schemas/Slot'
        ReturnResult:
          $ref: '#/components/schemas/ReturnResult'
          description:
            ReturnResult of skill specifies the return value that is returned after the execution
            of the skill. In most cases the return value will be boolean and indicate, whether
            the skill was executed OK or not (NOK). In the skill definition, the specification
            of the return result is optional, i.e. it can also be "void".
        Status:
          $ref: '#/components/schemas/Status'
          description:
            Describes the status during the execution of a robotic skill.
            Maps to the "Feedback"-Concept when implementing the skill as a ROS Action.
            In many cases, this will be a numeric value describing the completion percentage.
            In the skill definition, the specification of "status" is optional.

    Slot:
      type: object
      description:
        Defines a parameter slot for the robotic skill, if any.
      required:
        - SlotName
      properties:
        SlotName:
          type: string
          description:
            Unique name of the parameter, as defined by the ROBxTASK Version
            (e.g. Position, Location, OutputMessage, ...)
            There is a 1:n - Relation to the slot type, i.e. based on the SlotName, the SlotType is derived.
        SlotType:
          $ref: '#/components/schemas/RxtDataType'
          description:
            The data type required for this slot. Given a specific ROBxTASK version,
            this data type can be derived from the SlotName automatically. Therefore it is an optional.
        SlotValues:
          type: array
          items:
            type: string
          description:
            Array of allowed values for the defined slot, if SlotType is "Enum". This list shall be defined by the
            implementor of the skill because it may differ from robot to robot depending on the use case.
            For example, if a robot provides predefined positions, such as "parking lot",
            "target position", "start position", etc., then the robot engineer can provide such values to
            help the task designer in the understanding of the specific skill.
            If such values are provided, they shall be presented as "enum" for the task designers, when creating
            processes using that skill, otherwise any value will be accepted.
            Also more specific SlotNames (such as "RobotPosition") are usually also represented as Strings.

    ReturnResult:
      type: object
      description:
        A return result specified by a name and its ROBxTASK data type.
      required:
        - ReturnResultType
        - ReturnResultName
      properties:
        ReturnResultType:
          $ref: '#/components/schemas/RxtDataType'
        ReturnResultName:
          type: string
    Status:
      type: object
      description:
        A status value defined by a name and its ROBxTASK data type.
      required:
        - StatusType
        - StatusName
      properties:
        StatusType:
          $ref: '#/components/schemas/RxtDataType'
        StatusName:
          type: string

    Device:
      title: Device
      type: object
      properties:
        DeviceID:
          type: string
          description: ID of the device as defined by the Owner
        DeviceName:
          type: string
        DeviceOwner:
          type: string
          description: partyID of the company which owns the device
        DeviceDescription:
          type: string
        Skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        ConfigParams:
          type: array
          items:
            $ref: '#/components/schemas/ConfigParam'
      example:
        DeviceID: "2C:54:91:88:C9:E3"
        DeviceName: TheCorpora Q.BO One
        DeviceDescription: Social robot for more natural user interactions
        Skills:
          - SkillName: GetData
            SkillVersion: V0.1
            SkillDescription:
              This skill can be used to read from the currently set QBO internal settings.
              At the moment only reading 'robotName' and 'userName' is supported.
            SkillSlots:
              - SlotName: Endpoint
                SlotValues: ["Internal Settings"]
              - SlotName: InputData
                SlotValues: [ "robotName", "userName" ]

          - SkillName: MoveToLocation
            SkillVersion: V0.1
            SkillDescription:
              "QBO will move its head according to the specified SLOT direction.
              The following directions are possible: up, down, right, left, start.
              Passing the start-direction will make QBO go back to its original starting position."
            SkillSlots:
              - SlotName: Location
                SlotType: Enum
                SlotValues: [ "up", "down", "left", "right", "start" ]
        ConfigParams:
          - Key: "ROS Master URI"
            Value: "http://192.168.4.10:11311"
          - Key: "Internal Network Device-IP"
            Value: "192.168.4.12"
          - Key : "Internal Network Hostname"
            Value: "qbo"

    ConfigParam:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string

    RxtDataType:
      type: string
      description:
        Data types used in ROBxTASK.
        In V0.1, only four types are supported (String, Numeric, Enum or Bool).
      enum:
        - String
        - Numeric
        - Enum
        - Bool
        # Some additional ROBxTASK data types (mainly subclasses of the above) were discussed during
        # the stakeholder workshops. Can be introduced in future API versions.
        # - Actor # e.g. "Robot", "Device", "Person"
        # - AlarmThreshold
        # - Condition # (mathematical or logical expression)
        # - Datetime # one specific date / time
        # - Endpoint # w.r.t. GetData & SetData, e.g. REST-Endpoint for GET/POST/PUT Methods
        # - InputContent
        # - InputData
        # - InputMode
        # - Location # human-readable location (e.g., a specific room in the apartment)
        # - MeasurementInterval
        # - MessageContent # String "SendMessage"
        # - MessageType # enum "SendMessage", "OnReceiveMessage"
        # - Object # (tangible objects - e.g., glass of water, apple, etc.)
        # - ObjectData
        # - ObjectDestinationLocation
        # - ObjectPosition
        # - ObjectTargetLocation
        # - ObjectType
        # - Output # reference to an output, such as Shell/GUI/Logs, etc.
        # - OutputData
        # - OutputMessage # String "VoiceOutput", "GraphicalUserInteraction"
        # - Position # exact position (e.g. coordinates)
        # - RobotPosition
        # - Time # (for recurring events, e.g., every day at 00:00)
        # - Timestamp
        # - UserInput # (e.g., button press, touch input, voice input)
        # - UserOptions # enum "GraphicalUserInteraction"
    Task:
      title: Task
      type: object
      properties:
        TaskID:
          type: string
        TaskName:
          type: string
        TaskDescription:
          type: string
        TaskOwner:
          # 1. Schritt trust user
          # extract from token / bzw. check ob's übereinstimmt
          # TODO: get identity/user-info { -> Use UI-Token for this request
          #    "ublPartyID": "104",
          #    "ublPersonID": "102"
          #}
          # curl -X GET --header 'Accept: application/json' --header 'Authorization: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJkTzg3aVFOM0Y5UnppY2IzY19teFZDb1B6VnpZbHJYbThvRlprS1VoeW84In0.eyJqdGkiOiIyMGIwZmViNC00NWYzLTRhMTktYTNmMC00YjQ0MjQ4MDljMGIiLCJleHAiOjE2Mzk2NDg5NzQsIm5iZiI6MCwiaWF0IjoxNjM5NjQ4MDc0LCJpc3MiOiJodHRwczovL3JvYnh0YXNrLnNhbHpidXJncmVzZWFyY2guYXQ6ODQ0My9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOiJuaW1ibGVfY2xpZW50Iiwic3ViIjoiYjQ3ZDc5YmMtYjE2YS00OTYwLWE3ZjctMDRiZGFmNmUxZjJlIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoibmltYmxlX2NsaWVudCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6Ijk5NmQyNmFjLWExOTgtNDE5Yi05NmM5LWU4MGIzODZiNDJjMCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOltdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsibmltYmxlX3VzZXIiLCJpbml0aWFsX3JlcHJlc2VudGF0aXZlIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJuYW1lIjoiRmVsaXggU3Ryb2htZWllciIsInByZWZlcnJlZF91c2VybmFtZSI6ImZzdHJvaCtyb2J4dGFzazJAZ21haWwuY29tIiwiZ2l2ZW5fbmFtZSI6IkZlbGl4IiwiZmFtaWx5X25hbWUiOiJTdHJvaG1laWVyIiwiZW1haWwiOiJmc3Ryb2grcm9ieHRhc2syQGdtYWlsLmNvbSJ9.FQNqhHXxvM-ZZmGoptl8dHNoTMhRIoMBe2uCXld6y29t9p-RAf2cI3ZICJiTyP0KjaOwn32kdXWgifmhj4uF9_kvCxEKosj015sJSfiXBLPvVBl94QhafL2T9UKer9YmLEf31_l3N5Pu0UZ3ZMLLk81fhl2VWVGrsNwNhCm8n-g6huPt7PHorrnXfpc2Y2cs_Jst3UkFE4B41vMEV0kUgzusKeevxTj02uzBYm9Z6BvpkeRB7qtFBu5sgI-a2Dmv-vGxMkm3-4DRF1I6CIcG0X6IJHADw-W7A1bN3qYuL3yv9KUTJ8IJkUCZE0JF_u4Z8jqn-vIO3qv4Bb8mCQc0Fg' 'https://robxtask.salzburgresearch.at/robxtask/identity/user-info'
          # -> returns the info from currently logged in user (if token is valid)
          type: string
          description: personID of the user who created this task.
        TaskIsPublic:
          type: boolean
        UsedDevices:
          # Devices as *copy*! Referenced devices (with same DeviceID) will not change on device updates!
          type: array
          items:
            $ref: '#/components/schemas/Device'
        BlocklyWorkspace:
          type: string
          # encoded xml-string
        ConfigParams:
          type: array
          items:
            $ref: '#/components/schemas/ConfigParam'

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
      in: header
    register_task_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    register_device_key:
      type: apiKey
      name: register_device_key
      in: query
