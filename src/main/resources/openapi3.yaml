openapi: 3.0.1
info:
  title: ROBxTASK Registration Service
  description: This is the interface definition of a registration service for ROBxTASK
    (registration-service).
  termsOfService: https://robxtask.salzburgresearch.at/legal-notice/
  contact:
    email: fstroh@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
externalDocs:
  description: Find out more about ROBxTASK
  url: http://robxtask.salzburgresearch.at
servers:
  - url: /v1
tags:
  - name: device-controller
    description: Retrieve, create and manipulate single devices
    externalDocs:
      description: Source Code
      url: https://github.com/ROBxTASK/registration-service
  - name: devices-controller
    description: Retrieve multiple devices
    externalDocs:
      description: Source Code
      url: https://github.com/ROBxTASK/registration-service
  - name: version-controller
    description: Retrieve service identifier and version number
    externalDocs:
      description: Source Code
      url: https://github.com/ROBxTASK/registration-service
paths:
  /version:
    get:
      operationId: getVersion
      tags:
        - version
        - version-controller
      description:
        get the service id and version string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /device/{id}:
    get:
      operationId: getDeviceById
      tags:
        - device
        - device-controller
      description:
        get a specific device object by its id
      parameters:
        - name: id
          in: path
          description: An ID-String of the Device (e.g. MAC Address)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /device:
    put:
      operationId: updateDevice
      tags:
        - device
        - device-controller
      description: update a specific device object by its id
      requestBody:
        description: Device object that shall be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        200:
          description: Success
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Device not found
          content: {}
        405:
          description: Validation exception
          content: {}
      x-codegen-request-body-name: body
    post:
      operationId: addDevice
      tags:
        - device
        - device-controller
      description: post a device new object
      requestBody:
        description: Device object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: false
      responses:
        201:
          description: device added
          content: {}
        400:
          description: device post not successful, bad request.
          content: {}
        409:
          description: device not accepted, ID already existing
          content: {}
      x-codegen-request-body-name: body
  /devices:
    get:
      operationId: getDevices
      tags:
        - device
        - devices-controller
      description:
        get list of devices
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /secret:
    get:
      summary: Return secret string
      responses:
        200:
          description: secret response
          content:
            '*/*':
              schema:
                type: string
      security:
        - oauth2:
            - uid
components:
  schemas:
    Version:
      title: Version
      type: object
      properties:
        serviceId:
          type: string
        version:
          type: string
      example:
        serviceId: registration-service
        version: V1.0.0
    Skill:
      type: object
      required:
        - SkillName
      properties:
        SkillName:
          type: string
          description:
            Unique name of the skill, as defined below (MoveToLocation, SendMessage, etc.)
          enum:
            - CommissionParts
            - DeliverObject
            - DetectObject
            - FetchObject
            - GetData
            - GrabObject
            - GraphicalUserInteraction
            - Loop
            - MeasureHydration
            - MoveToLocation
            - MoveToPosition
            - OnMessageReceive
            - PutObject
            - Selection
            - SendMessage
            - SetData
            - TeachingObjectRecognition
            - TeachingWorkspacePosition
            - VoiceOutput
            - WaitForCondition
            - WaitForExternalEvent
            - WaitForUserInput
        SkillVersion:
          type: string
          enum: # possible values for the version field, i.e. the list of current and previous supported versions
            - V0.1
        SkillDescription:
          type: string
        SkillSlots:
          type: array
          items:
            $ref: '#/components/schemas/Slot'
        ReturnResult:
          $ref: '#/components/schemas/ReturnResult'
        Status:
          $ref: '#/components/schemas/Status'

    Slot:
      type: object
      description:
        Defines a parameter slot for the robotic skill, if any.
      required:
        - SlotName
        - SlotValues
      properties:
        SlotName:
          type: string
          description:
            Unique name of the parameter, as defined by the ROBxTASK Version
            (e.g. Position, Location, OutputMessage, ...)
            There is a 1:n - Relation to the slot type, i.e. based on the SlotName, the SlotType is derived.
            TODO -> Harmonisation with Wiki-Page!
          enum: # MAY NEED FURTHER HARMONISATION !
            - Actor # e.g. "Robot", "Device", "Person"
            - AlarmThreshold
            - Bool # (to inform caller about a potential result error)
            - Condition # (mathematical or logical expression)
            - Datetime # one specific date / time
            - Endpoint # w.r.t. GetData & SetData, e.g. REST-Endpoint for GET/POST/PUT Methods
            - Enum # (e.g., list of predefined position from which the user can choose)
            - InputContent
            - InputData
            - InputMode
            - Location # human-readable location (e.g., a specific room in the apartment)
            - MeasurementInterval
            - MessageContent # String "SendMessage"
            - MessageType # enum "SendMessage", "OnReceiveMessage"
            - Numeric # (also complex numerics, e.g., position data)
            - Object # (tangible objects - e.g., glass of water, apple, etc.)
            - ObjectData
            - ObjectDestinationLocation
            - ObjectPosition
            - ObjectTargetLocation
            - ObjectType
            - Output # reference to an output, such as Shell/GUI/Logs, etc.
            - OutputData
            - OutputMessage # String "VoiceOutput", "GraphicalUserInteraction"
            - Position # exact position (e.g. coordinates)
            - RobotPosition
            - String # (for text and complex information)
            - Time # (for recurring events, e.g., every day at 00:00)
            - Timestamp
            - UserInput # (e.g., button press, touch input, voice input)
            - UserOptions # enum "GraphicalUserInteraction"
        SlotValues:
          type: array
          items:
            type: string
          description:
            Array of allowed values for the defined slot. This list shall be defined by the
            implementor of the skill because it may differ from robot to robot depending on the use case.
            For example, if a robot provides predefined positions, such as "parking lot",
            "target position", "start position", etc., then the robot engineer can provide such values to
            help the task designer in the understanding of the specific skill.
            If such values are provided, they will be presented as "enum" for the task designers, when creating
            processes using that skill, otherwise any value will be accepted.
            Also more specific SlotNames (such as "RobotPosition") are usually also represented as Strings.
    ReturnResult:
      type: object
      description:
        ReturnResult specifies the return value that is returned after the execution of the skill.
        In most cases the return value will be boolean and indicate, whether the skill was executed OK or not (NOK).
        In the skill definition, the specification of the return result is optional, i.e. it can also be "void".
      required:
        - ReturnResultType
        - ReturnResultName
      properties:
        ReturnResultType:
          type: string
          enum:
            - Bool
            - String
            - Numeric
            - Object
            - Enum
        ReturnResultName:
          type: string
    Status:
      type: object
      description:
        Describes the status during the execution of a robotic skill. Maps to the "Feedback"-Concept when
        implementing the skill as a ROS Action. In most cases, this will be a numeric value describing the
        completion percentage. In the skill definition, the specification of "status" is optional.
      required:
        - StatusType
        - StatusName
      properties:
        StatusType:
          type: string
        StatusName:
          type: string

    SendMessage:
      allOf:
        - $ref: '#/components/schemas/Skill'


    OnMessageReceive:
      type: object
      properties:
        Slot1:
          $ref: '#/components/schemas/MessageType'
        Result:
          $ref: '#/components/schemas/MessageContent'

    MessageType:  # enum "SendMessage", "OnReceiveMessage"
      type: string
    MessageContent: # String "SendMessage"
      type: string

    Device:
      title: Device
      type: object
      properties:
        DeviceID:
          type: string
        DeviceName:
          type: string
        DeviceDescription:
          type: string
        Skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        ConfigParams:
          type: array
          items:
            $ref: '#/components/schemas/ConfigParam'
      example:
        DeviceID: "2C:54:91:88:C9:E3"
        DeviceName: TheCorpora Q.BO One
        DeviceDescription: Social robot for more natural user interactions
        Skills:
          - SkillName: GetData
            SkillVersion: V0.1
            SkillDescription:
              This skill can be used to read from the currently set QBO internal settings.
              At the moment only reading 'robotName' and 'userName' is supported.
            SkillSlots:
              - SlotName: Endpoint
                SlotValues: ["Internal Settings"]
              - SlotName: InputData
                SlotValues: [ "robotName", "userName" ]

          - SkillName: MoveToLocation
            SkillVersion: V0.1
            SkillDescription:
              "QBO will move its head according to the specified SLOT direction.
              The following directions are possible: up, down, right, left, start.
              Passing the start-direction will make QBO go back to its original starting position."
            SkillSlots:
              - SlotName: Location
                SlotValues: [ "up", "down", "left", "right", "start" ]
        ConfigParams:
          - Key: "ROS Master URI"
            Value: "192.168.4.10:11311"
          - Key: "Internal Network Device-IP"
            Value: "192.168.4.12"
          - Key : "Internal Network Hostname"
            Value: "qbo"

    ConfigParam:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://tbd.example.com/oauth2/dialog
          scopes:
            uid: Unique identifier of the user accessing the service.
