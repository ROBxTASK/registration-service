package at.srfg.robxtask.service;

import at.srfg.robxtask.persistence.MongoConnector;
import at.srfg.robxtask.swagger.api.DeviceApi;
import at.srfg.robxtask.swagger.model.Device;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.FindOneAndReplaceOptions;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;

/**
 * Forked from autogenerated code
 * author: fstroh
 */
@RestController
public class DeviceController implements DeviceApi {

    private static final Logger log = LoggerFactory.getLogger(DeviceController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;

    @Autowired
    private MongoConnector mongo;

    @Autowired
    public DeviceController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    public ResponseEntity<Device> getDeviceById(@Parameter(in = ParameterIn.PATH, description = "An ID-String of the Device (e.g. MAC Address)", required=true, schema=@Schema()) @PathVariable("id") String id) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                MongoCollection<Document> devices = mongo.getCollection("devices");
                Document device = devices.find(new Document("DeviceID", id)).first();

                if (device == null) {
                    return new ResponseEntity<Device>(HttpStatus.NOT_FOUND);
                }
                return new ResponseEntity<Device>(objectMapper.readValue(device.toJson(), Device.class), HttpStatus.OK);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<Device>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<Device>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Override
    public ResponseEntity<Void> addDevice(@Parameter(in = ParameterIn.DEFAULT, description = "Device object that needs to be added", schema=@Schema()) @Valid @RequestBody Device body) {
        String accept = request.getHeader("Accept");
        MongoCollection<Document> devices = mongo.getCollection("devices");
        Document device = devices.find(new Document("DeviceID", body.getDeviceID())).first();
        if (device != null) {
            return new ResponseEntity<Void>(HttpStatus.CONFLICT);
        }
        try {
            devices.insertOne(Document.parse(objectMapper.writeValueAsString(body)));
        } catch (JsonProcessingException e) {
            return new ResponseEntity<Void>(HttpStatus.NOT_ACCEPTABLE);
        }
        return new ResponseEntity<Void>(HttpStatus.CREATED);
    }

    @Override
    public ResponseEntity<Void> updateDevice(@Parameter(in = ParameterIn.DEFAULT, description = "Device object that shall be updated", required=true, schema=@Schema()) @Valid @RequestBody Device body) {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                MongoCollection<Document> devices = mongo.getCollection("devices");
                final FindOneAndReplaceOptions options = new FindOneAndReplaceOptions().upsert(true);
                final Document searchDoc = new Document("DeviceID", body.getDeviceID());
                final Document replacement = Document.parse(objectMapper.writeValueAsString(body));
                devices.findOneAndReplace(
                        searchDoc,
                        replacement,
                        options);
                return new ResponseEntity<Void>(HttpStatus.OK);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }
        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
    }

}
