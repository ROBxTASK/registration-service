package at.srfg.robxtask.service;

import at.srfg.robxtask.persistence.MongoConnector;
import at.srfg.robxtask.swagger.api.DevicesApi;
import at.srfg.robxtask.swagger.model.Device;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.client.*;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Forked from autogenerated code
 * author: fstroh
 */
@RestController
public class DevicesController implements DevicesApi {

    private static final Logger log = LoggerFactory.getLogger(DevicesController.class);

    private final ObjectMapper objectMapper;

    private final HttpServletRequest request;

    @Autowired
    private MongoConnector mongo;

    @Autowired
    public DevicesController(ObjectMapper objectMapper, HttpServletRequest request) {
        this.objectMapper = objectMapper;
        this.request = request;
    }

    @Override
    public ResponseEntity<List<Device>> getDevices() {
        String accept = request.getHeader("Accept");
        if (accept != null && accept.contains("application/json")) {
            try {
                MongoCollection<Document> devicesCol = getDeviceCollection();
                final FindIterable<Document> devices = devicesCol.find();
                List<Device> res = new ArrayList<>();
                for (Document device : devices) {
                    res.add(objectMapper.readValue(device.toJson(), Device.class));
                }
                return new ResponseEntity<List<Device>>(res, HttpStatus.OK);
            } catch (IOException e) {
                log.error("Couldn't serialize response for content type application/json", e);
                return new ResponseEntity<List<Device>>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }

        return new ResponseEntity<List<Device>>(HttpStatus.NOT_IMPLEMENTED);
    }

    private MongoCollection<Document> getDeviceCollection() {
        return mongo.getCollection("devices");
    }

}
